from bottle import view, route, response, hook, TEMPLATE_PATH, template

TEMPLATE_PATH[:] = ['templates']


@hook('after_request')
def init_response():
    response.content_type = 'text/html'


@route('/')
@route('/home')
@view("navigation_bar.tpl")
def home():
    body = template('home.tpl', root="templates")
    return {"body": body}


def answer(message, mode):
    answer = template('message.tpl', message=message, mode=mode)
    return answer


def list_foreign_keys(entity_service):
    entity_fk = entity_service.find_all()
    list = [entity.to_dict() for entity in entity_fk]
    return list


def get_all(entities, entity_class, footer):
    list = [entity.to_dict() for entity in entities]
    output = template('{}.tpl'.format(entity_class), list=list, footer=footer)
    return {"body": output}


def create(result, entity_class):
    if result:
        if type(result) == entity_class:
            return answer("Created", "success")
        else:
            return answer(result, "danger")
    else:
        return answer("Already in database", "danger")


def update(result):
    if result:
        if type(result) == int and result > 0:
            return answer("Updated", "success")
        else:
            return answer(result, "danger")
    else:
        return answer("Entity not found", "danger")
    

def delete(result):
    if result:
        if type(result) == int and result > 0:
            return answer("Deleted", "success")
        else:
            return answer(result, "danger")
    else:
        return answer("Bad request", "danger")
